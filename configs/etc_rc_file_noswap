#!/bin/sh

echo Runnning \(ttsystem\) etc/rc ...

fstype="vfat"
mntopt="rw,exec,noatime,nodev,nosuid"
devbase="/dev"
ext2p=mmcblk0p2



initial_mount() {
	mount -n -t proc none /proc
	mount -n -t sysfs none /sys
	# Remount root fs as R/W
	mount -o remount,rw /
	
	# Mount Ramfs in dir likely to be written
	mount -n -t tmpfs  none /dev/shm      
#	mount -n -t tmpfs  none /tmp          
#	mount -n -t tmpfs  none /var/run     
	mount -n -t usbfs none /proc/bus/usb 
#	mount -n -t devpts none /dev/pts     
	
	#Mount flash where it is used to be found on TT...
	#mount -n -t ngffs mtd0 /mnt/flash
}

do_mount_storage() {

    # Start out assuming we don't have to reboot...
    echo 0 > /proc/barcelona/rebootonsdremoval
    cnt=""
    for part in ${storagedevs}; do
      #blkdev = ${part} without the pX for partition
      blkdev=${part%p?}
      if test "${#cnt}" = "0"; then
        # first mount, is bootdisk
	rm -f ${devbase}/sdcard
        ln -s ${devbase}/${part} ${devbase}/sdcard

	mntpt="/mnt/sdcard"

        if test -e /sys/block/${blkdev}/device/scr; then
          # We boot from SD, tell the kernel (for sd removal while sleeping)
          echo 1 > /proc/barcelona/rebootonsdremoval
        fi
      elif test "${#cnt}" = "1"; then
        # second mount, must be movinand
        mntpt="/mnt/movinand"
      else
        mntpt="/mnt/storage${cnt}"
      fi

      # Now check if storage that we're mounting is a removable device, and
      # if so, mount as 'sync'.
      if test -e /sys/block/${blkdev}/device/scr; then
        curmntopt="${mntopt},sync"
    else
        curmntopt="${mntopt}"
      fi

      # Now it is safe to do the mounting...
      mkdir -p ${mntpt}
      if mount -t ${fstype} -o ${curmntopt} ${devbase}/${part} ${mntpt}  >/dev/null 2>&1; then
        echo "* Storage ${part} mounted on ${mntpt}"
        cnt="${cnt}1"      
      fi 
    done

    if test "${cnt}" != ""; then
      mnt_ok="y"
    fi
}

mount_storage() {
  echo "* Detecting main storage partitions"

  partitions=`sed -r "s/( )+/ /g" /proc/partitions | cut -s -d\  -f 5`
  storagedevs=""

    for part in ${partitions}; do
    #blkdev = ${part} without the pX for partition
    blkdev=${part%p?}
    if test "${part#mmcblk}" != "${part}"; then
      # Found SD/MMC, this could be our boot disk!
      if test "${hw_bootdevice}" = ""; then
        # Bootloader didn't give a CID, so assume this is the boot device
        storagedevs="${part} ${storagedevs}"
      elif test "`cat /sys/block/${blkdev}/device/cid`" = "${hw_bootdevice}"; then
        # this was the boot device...
        storagedevs="${part} ${storagedevs}"
      else
        # just storage device
        storagedevs="${storagedevs} ${part}"
        fi
    elif test "${part#hd}" != "${part}"; then
      # Found Harddisk, so must be boot disk (we ship no devices with HDD & other storage)
      storagedevs="${part} ${storagedevs}"
    elif test "${part#mtd}" != "${part}"; then
      # Found Flash chip, we don't mount that here
      storagedevs="${storagedevs}"
    else
      echo Ignoring unknown storage device ${part}...
        fi
  done

  # Trim spaces from start/end
  #NOTE: the space after # has intentionally been left blank ;)
  storagedevs="${storagedevs# }"
  storagedevs="${storagedevs% }"

  if test "${storagedevs}" = ""; then
    echo "* No storage detected"
    unset storagedevs
  else
    mnt_ok="n"
    do_mount_storage
  fi
}


initial_mount 

# Note : This sleep is Absolutly necessary in order to let mmc driver enough time to probe all cards !
sleep 3

# Generic mount storage device (sdcards and hard disk) 
hw_bootdevice=`cat /proc/barcelona/bootdevice`
#mount_storage

DIST=/mnt/sdcard/opentom
KVER=`uname -r`

# Starting USB Ether Gadget ...
#insmod /lib/modules/$KVER/kernel/drivers/usb/gadget/s3c24xx_udc.ko
#insmod /lib/modules/$KVER/kernel/drivers/usb/gadget/g_ether.ko
modprobe ext3
#ifconfig usb0 192.168.1.10
# DHCPD Server

#udhcpd -f /etc/udhcpd.conf &

# Starting telnet daemon ...
#( cd $DIST ; /usr/sbin/telnetd -F & )
#sleep 900
#set -e
#mount -n -t proc none /proc
#cat /proc/partitions
echo Mounting Newroot
mount -o remount,rw /
mkdir /newroot
mount -o rw -t ext3 /dev/$ext2p /newroot
mount --move /sys /newroot/sys
mount --move /proc /newroot/proc
mkdir -p /newroot/dev/pts
mount -n -t devpts none /newroot/dev/pts
#mount --move /dev /newroot/dev
cp -ar /dev/ /newroot/
#sleep 300

echo exec switch_root /newroot /init
exec switch_root /newroot /init $@

# Running /mnt/sdcard/opentom/start.sh script ...
#sh $DIST/start.sh >$DIST/logs/start.log 2>&1

sleep 10
force_reboot

